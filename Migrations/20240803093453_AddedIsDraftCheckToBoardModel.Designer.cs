// <auto-generated />
using System;
using Frogmarks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Frogmarks.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240803093453_AddedIsDraftCheckToBoardModel")]
    partial class AddedIsDraftCheckToBoardModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoardTeam", b =>
                {
                    b.Property<long>("BoardsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamsId")
                        .HasColumnType("bigint");

                    b.HasKey("BoardsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("BoardTeam");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserCode");

                    b.ToTable("DeviceFlowCodes");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Frogmarks.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AzureUserIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TeamProjectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamProjectId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Frogmarks.Models.Auth.EmailToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTokens");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedIp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PermissionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreferencesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("StartViewLeftBottom")
                        .HasColumnType("int");

                    b.Property<int>("StartViewLeftTop")
                        .HasColumnType("int");

                    b.Property<int>("StartViewRightBottom")
                        .HasColumnType("int");

                    b.Property<int>("StartViewRightTop")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedIp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("isDraft")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PermissionsId")
                        .IsUnique()
                        .HasFilter("[PermissionsId] IS NOT NULL");

                    b.HasIndex("PreferencesId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardCollaborator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("TeamUserId");

                    b.ToTable("BoardsCollaborators");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long>("OptionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionDataId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("OptionsId");

                    b.HasIndex("TypeId");

                    b.ToTable("BoardItems");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardItemOptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BorderOpacity")
                        .HasColumnType("float");

                    b.Property<int?>("BorderThickness")
                        .HasColumnType("int");

                    b.Property<int?>("FontId")
                        .HasColumnType("int");

                    b.Property<int?>("FontSize")
                        .HasColumnType("int");

                    b.Property<int>("HorizontalAlignment")
                        .HasColumnType("int");

                    b.Property<int>("VerticalAlignment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BoardItemOptions");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardItemPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardItemId")
                        .HasColumnType("bigint");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Rotation")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardItemId")
                        .IsUnique();

                    b.ToTable("BoardItemPosition");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardItemType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("HasBorderOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFillColor")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFont")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFontSize")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFontStyle")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHighlightColor")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLink")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLock")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTextAlignment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTextColor")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BoardItemType");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardPermissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CanNonCollaboratorsEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanNonCollaboratorsView")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BoardPermissions");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BoardCollaboratorId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardCollaboratorId");

                    b.ToTable("BoardRole");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardUserPreferences", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AlignObjects")
                        .HasColumnType("bit");

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<bool>("FollowAllThreads")
                        .HasColumnType("bit");

                    b.Property<int>("PeripheralType")
                        .HasColumnType("int");

                    b.Property<bool>("ReduceMotion")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowCollaboratorCursors")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowCommentsOnBoard")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowObjectDimensions")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowScrollBars")
                        .HasColumnType("bit");

                    b.Property<bool>("SnapToGrid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BoardUserPreferences");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardViewLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastViewed")
                        .HasColumnType("datetime2");

                    b.Property<long>("TeamUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BoardId");

                    b.HasIndex("TeamUserId");

                    b.ToTable("BoardViewLogs");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamPermissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanAddMembers")
                        .HasColumnType("bit");

                    b.Property<bool>("CanChangePermissions")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreateBoards")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreateProjects")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteBoards")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteMembers")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteProjects")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditBoards")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditProjects")
                        .HasColumnType("bit");

                    b.Property<long>("TeamRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamRoleId")
                        .IsUnique();

                    b.ToTable("TeamPermissions");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamProjects");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PermissionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamUserId");

                    b.ToTable("TeamRole");
                });

            modelBuilder.Entity("Frogmarks.Models.TeamUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("BoardTeam", b =>
                {
                    b.HasOne("Frogmarks.Models.Board.Board", null)
                        .WithMany()
                        .HasForeignKey("BoardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Frogmarks.Models.Team.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Frogmarks.Models.ApplicationUser", b =>
                {
                    b.HasOne("Frogmarks.Models.Team.TeamProject", null)
                        .WithMany("Users")
                        .HasForeignKey("TeamProjectId");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.Board", b =>
                {
                    b.HasOne("Frogmarks.Models.TeamUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Frogmarks.Models.TeamUser", "ModifiedBy")
                        .WithMany("FavoriteBoards")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Frogmarks.Models.Board.BoardPermissions", "Permissions")
                        .WithOne("Board")
                        .HasForeignKey("Frogmarks.Models.Board.Board", "PermissionsId");

                    b.HasOne("Frogmarks.Models.Board.BoardUserPreferences", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferencesId");

                    b.HasOne("Frogmarks.Models.Team.TeamProject", "Project")
                        .WithMany("Boards")
                        .HasForeignKey("ProjectId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Permissions");

                    b.Navigation("Preferences");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardCollaborator", b =>
                {
                    b.HasOne("Frogmarks.Models.Board.Board", null)
                        .WithMany("Collaborators")
                        .HasForeignKey("BoardId");

                    b.HasOne("Frogmarks.Models.TeamUser", "TeamUser")
                        .WithMany()
                        .HasForeignKey("TeamUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TeamUser");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardItem", b =>
                {
                    b.HasOne("Frogmarks.Models.Board.Board", null)
                        .WithMany("BoardItems")
                        .HasForeignKey("BoardId");

                    b.HasOne("Frogmarks.Models.Board.BoardItemOptions", "Options")
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Frogmarks.Models.Board.BoardItemType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Options");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardItemPosition", b =>
                {
                    b.HasOne("Frogmarks.Models.Board.BoardItem", "BoardItem")
                        .WithOne("PositionData")
                        .HasForeignKey("Frogmarks.Models.Board.BoardItemPosition", "BoardItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardItem");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardRole", b =>
                {
                    b.HasOne("Frogmarks.Models.Board.BoardCollaborator", null)
                        .WithMany("BoardRoles")
                        .HasForeignKey("BoardCollaboratorId");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardViewLog", b =>
                {
                    b.HasOne("Frogmarks.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Frogmarks.Models.Board.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Frogmarks.Models.TeamUser", "TeamUser")
                        .WithMany()
                        .HasForeignKey("TeamUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Board");

                    b.Navigation("TeamUser");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamPermissions", b =>
                {
                    b.HasOne("Frogmarks.Models.Team.TeamRole", "TeamRole")
                        .WithOne("Permissions")
                        .HasForeignKey("Frogmarks.Models.Team.TeamPermissions", "TeamRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamRole");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamProject", b =>
                {
                    b.HasOne("Frogmarks.Models.Team.Team", null)
                        .WithMany("TeamProjects")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamRole", b =>
                {
                    b.HasOne("Frogmarks.Models.Team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Frogmarks.Models.TeamUser", null)
                        .WithMany("TeamRoles")
                        .HasForeignKey("TeamUserId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Frogmarks.Models.TeamUser", b =>
                {
                    b.HasOne("Frogmarks.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("TeamUserScopes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Frogmarks.Models.Team.Team", null)
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Frogmarks.Models.ApplicationUser", b =>
                {
                    b.Navigation("TeamUserScopes");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.Board", b =>
                {
                    b.Navigation("BoardItems");

                    b.Navigation("Collaborators");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardCollaborator", b =>
                {
                    b.Navigation("BoardRoles");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardItem", b =>
                {
                    b.Navigation("PositionData");
                });

            modelBuilder.Entity("Frogmarks.Models.Board.BoardPermissions", b =>
                {
                    b.Navigation("Board");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.Team", b =>
                {
                    b.Navigation("TeamProjects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamProject", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Frogmarks.Models.Team.TeamRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Frogmarks.Models.TeamUser", b =>
                {
                    b.Navigation("FavoriteBoards");

                    b.Navigation("TeamRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
